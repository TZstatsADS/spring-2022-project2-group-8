data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat)
popuplot<-ggplot(data=plotData,aes(x=Weekdays,y=TURNSTILE_PER_WEEKDAY,fill=TURNSTILE_PER_WEEKDAY))+
geom_bar(position="stack", stat="identity", width = 0.9) +
scale_fill_steps2(
low = "#ff0000",
mid = "#fff2cc",
high = "#70ad47",
midpoint = 5)+
ggtitle(paste0("Number of entries overview in ", year)) +
theme(legend.position = "none")
return(popuplot)
}
p<-as.list(NULL)
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
p[[i]]<-makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
p
p[[i]]
p[[1]]
p[[2]]
p[[3]]
p[[4]]
p[[5]]
p[[6]]
p[[7]]
p[[8]]
p[[9]]
p[[10]]
p[[454]]
p[[43]]
p[[100]]
p[[110]]
p[[210]]
p[[310]]
p[[410]]
p[[510]]
plot_ly(data=plotData, x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY)
plot_ly(data=plotData, x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar")
plot_ly(data=plotData, x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar")
plotData
view(plotData)
View(plotData)
plot_ly(data=plotData%>%filter(Year=="2019"), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar")
plot_ly(data=st_drop_geometry(plotData%>%filter(Year=="2019")), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar")
fig<-plot_ly(data=st_drop_geometry(plotData%>%filter(Year=="2019")), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar")
fig <- fig %>% layout(yaxis = list(title = 'Count'))
fig
year
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
p[[year+i]]<-makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat)
fig<-plot_ly(data=st_drop_geometry(plotData%>%filter(Year=="2019")), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
return(popuplot)
}
p<-as.list(NULL)
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
p[[year+i]]<-makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
fig<-plot_ly(data=st_drop_geometry(plotData%>%filter(Year=="2019")), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig
fig<-plot_ly(data=st_drop_geometry(plotData%>%filter(Year=="2019")), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name="Number of entries per weekday in")
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig
fig<-plot_ly(data=st_drop_geometry(plotData%>%filter(Year=="2019")), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%write_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",long,lat,year))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",long,lat,year))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
library(leafpop)
install.packages(leafpop)
install.packages("leafpop")
library(leafpop)
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
week_subway<-data%>%filter(Year_Week=="2020-32")
lapply(1:nrow(week_subway),function(i){
makePopupPlot(week_subway$GTFS.Latitude[i],
week_subway$GTFS.Longitude[i],
strsplit(input$date,"-")[1],
data_per_week_days)})
makePopupPlot(week_subway$GTFS.Latitude[1],
week_subway$GTFS.Longitude[1],
2020,
data_per_week_days)
makePopupPlot <- function(lat, long, year, df){
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
return(fig)
}
makePopupPlot(week_subway$GTFS.Latitude[1],
week_subway$GTFS.Longitude[1],
2020,
data_per_week_days)
makePopupPlot(week_subway$GTFS.Latitude[1],
week_subway$GTFS.Longitude[1],
strsplit(week_subway$Year_Week,"-")[1],
data_per_week_days)
makePopupPlot(week_subway$GTFS.Latitude[1],
week_subway$GTFS.Longitude[1],
unlist(strsplit(week_subway$Year_Week,"-"))[1],
data_per_week_days)
lapply(1:nrow(week_subway),function(i){
makePopupPlot(week_subway$GTFS.Latitude[i],
week_subway$GTFS.Longitude[i],
unlist(strsplit(input$date,"-"))[1],
data_per_week_days)})
lapply(1:nrow(week_subway),function(i){
makePopupPlot(week_subway$GTFS.Latitude[i],
week_subway$GTFS.Longitude[i],
unlist(strsplit(week_subway$Year_Week[i],"-"))[1],
data_per_week_days)})
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",long,lat,year))
}
fig
htmlEscape(fig)
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",long,lat,year),overwrite="False")
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",long,lat,year))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,lat,))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,lat))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,"-",lat),sep="")
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,"-",lat,sep=""))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2018")
list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2018")[-439]
list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019")[-439]
file<-list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019")[1]
file<-paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019/",file,sep="")
file
read_html(file)
read.table(file)
library(textreadr)
library(textreadr)
install.packages("textreadr")
library(textreadr)
read_html(file)
a<-read_html(file)
a
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,"-",lat,".html",sep=""))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
file<-paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019/",file,sep="")
file
a<-read_html(file)
file<-list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019")[1]
file<-paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019/",file,sep="")
a<-read_html(file)
a
remove.packages("textreadr")
library(rvest)
library(xml2)
a<-read_html(file)
a
a[1]
a[2]
a
a
a$body
View(a)
xml_child(a, 2)
as.character(a)
HTML(as.character(a))
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
file<-list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019")
file<-paste0("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019/",file,sep="")
file
file<-list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019")
file
file<-list.files("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2020")
file
file<-file[-length(file)]
file
file<-paste0("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/2019/",file,sep="")
file
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
a
fig
HTLM(fig)
htlmtools::HTLM(fig)
HTML(fig)
htmlwidgets::saveWidget(fig)
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmlwidgets::saveWidget(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,"-",lat,".html",sep=""))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,"-",lat,".html",sep=""))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
makePopupPlot <- function (lat, long, year, df) {
plotData<-df%>%filter(GTFS.Longitude == long, GTFS.Latitude == lat, Year==year)
fig<-plot_ly(data=st_drop_geometry(plotData), x=~Weekdays,y=~TURNSTILE_PER_WEEKDAY,type="bar",name=paste("Number of entries per weekday in",year))
fig<- fig %>% layout(yaxis = list(title = 'Count'))
fig%>%htmltools::save_html(paste("C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro/www/Weekdays_plot/",year,"/",long,"-",lat,".html",sep=""))
}
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
list_year<- data_per_week_days$Year%>%unique
list_latitude_longitude<-data_per_week_days%>%select("GTFS.Latitude","GTFS.Longitude")%>%unique
for(year in list_year){
for(i in 1:nrow(list_latitude_longitude)){
makePopupPlot(list_latitude_longitude$GTFS.Latitude[i],
list_latitude_longitude$GTFS.Longitude[i],
year,
data_per_week_days)
}
}
source("C:/Users/aroni/Documents/STATGR5243/Project_2/spring-2022-project2-group-8/lib/Cleaning MTA_Subway_files.R", echo=TRUE)
shiny::runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/Shiny-App-Intro')
library(shiny); runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/spring-2022-project2-group-8/app/app_0221.R')
data$Year_Week
data$Year_Week[1]
as.Date(data$Year_Week[1])
as.Date(data$Year_Week[1],"%Y-%U%u)
""
"
as.Date(data$Year_Week[1],"%Y-%U%u")
as.Date(data$Year_Week[1],"%Y%U%u")
as.Date(paste(strpsplit(data$Year_Week[1],split="-"),sep="1",collapse=0),"%Y%U%u")
library(rvest)
library(xml2)
library(tidyverse)
library(ggmap)
library(lubridate)
library(remotes)
library(sf)
library(dplyr)
library(time)
library(rvest)
as.Date(data$Year_Week[1],"%Y%U%u")
as.Date(paste(strpsplit(data$Year_Week[1],split="-"),sep="1",collapse=0),"%Y%U%u")
as.Date(paste(strsplit(data$Year_Week[1],split="-"),sep="1",collapse=0),"%Y%U%u")
as.Date(paste(strsplit(data$Year_Week[1],split="-"),sep="1",collapse=""),"%Y%U%u")
paste(strsplit(data$Year_Week[1],split="-"),sep="1",collapse="")
paste(unlist(strsplit(data$Year_Week[1],split="-")),sep="1",collapse="")
paste(unlist(strsplit(data$Year_Week[1],split="-")),collapse="1")
paste(strsplit(data$Year_Week[1],split="-"),sep="1",collapse="1")
as.Date(paste(unlist(strsplit(data$Year_Week[1],split="-"),collapse="1")),"%Y%U%u")
as.Date(paste(unlist(strsplit(data$Year_Week[1],split="-")),collapse="1"),"%Y%U%u")
a<-as.Date(paste(unlist(strsplit(data$Year_Week[1],split="-")),collapse="1"),"%Y%U%u")
week(a)
data<-data%>%mutate(Year_Week = as.Date(paste(unlist(strsplit(Year_Week,split="-")),collapse="1"),"%Y%U%u"))
View(data)
data<-data[order(data$DATE),]
data<-data[order(data$Year_Week),]
data<-st_as_sf(data)
write.csv(data,"C:/Users/aroni/Documents/STATGR5243/Project_2/spring-2022-project2-group-8/data/Subway/cleaned/Subway_Data_Processed.csv")
write_rds(data,"C:/Users/aroni/Documents/STATGR5243/Project_2/spring-2022-project2-group-8/data/Subway/cleaned/Subway_Data_Processed.RDS")
data_per_week_days<-data_per_week_days%>%mutate(Year_Week = as.Date(paste(unlist(strsplit(Year_Week,split="-")),collapse="1"),"%Y%U%u"))
View(data_per_week_days)
runApp('C:/Users/aroni/Documents/STATGR5243/Project_2/spring-2022-project2-group-8/app/app_0221.R')
data<-data%>%mutate(Year_Week = as.Date(paste(unlist(strsplit(Year_Week,split="-")),collapse="1"),"%Y%U%u"))
translation_weekdays<-as.data.frame(list(
"days"=c("monday",
"tuesday",
"wednesday",
"thursday",
"friday",
"saturday",
"sunday"),
"jour"=c("lundi",
"mardi",
"mercredi",
"jeudi",
"vendredi",
"samedi",
"dimanche")
))
data_per_week_days = readRDS("../data/Subway/cleaned/Weekday_Subway_Data_Processed.RDS")
setwd("C:/Users/aroni/Documents/STATGR5243/Project_2/spring-2022-project2-group-8/app")
data_per_week_days = readRDS("../data/Subway/cleaned/Weekday_Subway_Data_Processed.RDS")
lapply(data_per_week_days$Weekdays,function(i){})
lapply(data_per_week_days$Weekdays,function(i){
})
lapply(data_per_week_days$Weekdays,function(day){
(translation_weekdays%>%filter(jour==day))$days})
library(dplyr)
lapply(data_per_week_days$Weekdays,function(day){
(translation_weekdays%>%filter(jour==day))$days})
data_per_week_days<-unlist(lapply(data_per_week_days$Weekdays,function(day){(translation_weekdays%>%filter(jour==day))$days}))
data_per_week_days$Weekdays<-ordered(data_per_week_days$Weekdays,levels=c("lundi", "mardi", "mercredi", "jeudi","vendredi", "samedi", "dimanche"))
data_per_week_days = readRDS("../data/Subway/cleaned/Weekday_Subway_Data_Processed.RDS")
data_per_week_days$Weekdays<-unlist(lapply(data_per_week_days$Weekdays,function(day){(translation_weekdays%>%filter(jour==day))$days}))
write.csv(data_per_week_days,"../data/Subway/cleaned/Weekday_Subway_Data.csv")
write_rds(data_per_week_days,"../data/Subway/cleaned/Weekday_Subway_Data_Processed.RDS")
library(rvest)
library(xml2)
library(tidyverse)
library(ggmap)
library(lubridate)
library(remotes)
write.csv(data_per_week_days,"../data/Subway/cleaned/Weekday_Subway_Data.csv")
write_rds(data_per_week_days,"../data/Subway/cleaned/Weekday_Subway_Data_Processed.RDS")
library(shiny); runApp('app_0221.R')
data_per_week_days<-st_as_sf(data_per_week_days)
write.csv(data_per_week_days,"../data/Subway/cleaned/Weekday_Subway_Data.csv")
write_rds(data_per_week_days,"../data/Subway/cleaned/Weekday_Subway_Data_Processed.RDS")
runApp('app_0221.R')
runApp('app_0221.R')
warning())
warning()
data_per_week_days
write_rds(data_per_week_days,"../data/Subway/cleaned/Weekday_Subway_Data_Processed.RDS")
runApp('app_0221.R')
runApp('app_0221.R')
data_per_week_days$Weekdays
is.na(data_per_week_days$Weekdays)
data_per_week_days[is.na(data_per_week_days$Weekdays),]
runApp('app_0221.R')
runApp('app_0221.R')
runApp('app_0221.R')
data$station%>%unique
runApp('app_0221.R')
